// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

  // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ---- MODELS CREATED BY NEXT-AUTH ----

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // User's posted summaries
  summaries Summary[]  @relation("Posts")
  // User's liked summaries
  likes     Summary[]  @relation("Likes")
  // User's education level
  education Education?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---- UNIQUE MODELS ----

model Article {
  doi_number String    @id
  title      String    @default("Title Not Found")
  summaries  Summary[]
}

model Summary {
  id Int @id @default(autoincrement())

  Article   Article? @relation(fields: [articleId], references: [doi_number])
  articleId String?

  author User   @relation("Posts", fields: [userId], references: [id])
  userId String

  likes User[] @relation("Likes", references: [id])
}

enum Education {
  SOME_HIGHSCHOOL
  HIGHSCHOOL
  SOME_COLLEGE
  BS
  MASTERS
  PHD
}
